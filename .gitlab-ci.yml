# This file is a template, and might need editing before it works on your project.
image: golang:1.19

variables:
  # Please edit to your GitLab project
  REPO_NAME: collection-center

# The problem is that to be able to use go get, one needs to put
# the repository in the $GOPATH. So for example if your gitlab domain
# is gitlab.com, and that your repository is namespace/project, and
# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/namespace/project
# Thus, making a symbolic link corrects this.
before_script:
  - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
  - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
  - cd $GOPATH/src/$REPO_NAME
  - mkdir -p /work/conf
  - cp ./resources/config.yaml /work/conf

stages:
  #  - test
  - build
  - deploy

  #api_test:
  #  stage: test
  #  script:
  #- go fmt $(go list ./... | grep -v /vendor/)
  #- go vet $(go list ./... | grep -v /vendor/)
  #- go test -race $(go list ./... | grep -v /vendor/)

#build:
#  stage: build
#  script:
#    - pwd
#    - go build -race -ldflags "-extldflags '-static'" -o $CI_PROJECT_DIR/$REPO_NAME
#  artifacts:
#    paths:
#      - $REPO_NAME
build_image:
  stage: build
  script:
    - echo "docker build start"
    - docker build . -t collection-center:1.0.0
    - echo "docker build finish"
  only:
    - main
deploy:
  stage: deploy
  script:
    - docker-compose up -d
  only:
    - main